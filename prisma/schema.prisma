// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// SEE prisma/DB.md for more documentation on bitwise and etc.

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["windows", "debian-openssl-1.1.x"]
  output        = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @unique @default(uuid()) // ID
  name           String           @unique
  password       String?
  email          String           @unique
  avatar         String           @default("default.png") // User avatar
  auth           Auth?
  connections    Connection[]
  notifications  Notification[] // All notifications
  punishments    Punishment[]
  badges         Badge[]          @relation("UserBadges")
  last_claim     DateTime? // Last claim for balance
  settings       UserSetting[] // JSON - discord, email, etc.
  permissions    UserPermission[]
  status         UserStatus[]     @default([UNVERIFIED])
  created_at     DateTime         @default(now())
  verification   String?          @unique
  roundInstances RoundPlayer[]
}

model Permission {
  id          String           @id @unique @default(uuid())
  name        String
  description String?
  instances   UserPermission[]
}

model UserPermission {
  user_id       String
  permission_id String
  user          User       @relation(fields: [user_id], references: [id])
  permission    Permission @relation(fields: [permission_id], references: [id])

  @@id([user_id, permission_id]) // Composite primary key for user-permission relationship
}

model Setting {
  id          String        @id @unique @default(uuid())
  name        String
  description String?
  type        String
  instances   UserSetting[]
}

model UserSetting {
  user_id    String
  setting_id String
  value      String // The value of the setting (e.g., 'true', 'false', 'dark_mode', etc.)
  user       User    @relation(fields: [user_id], references: [id])
  setting    Setting @relation(fields: [setting_id], references: [id])

  @@id([user_id, setting_id]) // Composite primary key
}

enum UserStatus {
  REPORTED
  ACTIVE
  UNVERIFIED
  PUNISHMENT
  NOPFP
  NOCHAT
  NONAMECHANGE
}

model Badge {
  id          String  @id @unique @default(uuid())
  name        String
  description String?
  users       User[]  @relation("UserBadges")
}

model Connection {
  user        User   @relation(fields: [user_id], references: [id])
  user_id     String
  platform    String
  platform_id String

  @@id([platform, platform_id])
  @@index([user_id])
}

model Auth {
  token        String    @id @default(uuid())
  user_id      String    @unique
  user         User      @relation(references: [id], fields: [user_id], onDelete: Cascade)
  auth_expires DateTime?
  last_login   DateTime?
  totp_key     String?
}

model Notification {
  id         String    @id @unique @default(uuid())
  users      User[]
  head       String
  body       String
  read       Boolean   @default(false)
  created_at DateTime  @default(now()) // Timestamp when notification was created
  readAt     DateTime? // Timestamp when notification was read
}

model Game {
  id         String    @id @default(uuid())
  rounds     Round[] // List of rounds played at this table
  created_at DateTime  @default(now())
  ended_at   DateTime? // Timestamp for when the table is destroyed (when empty)
  table_name String
  game_name  String
  created_by String

  @@index([created_at])
  @@index([ended_at])
}

model Round {
  id         String        @id @default(uuid())
  game       Game          @relation(fields: [gameId], references: [id])
  gameId     String
  players    RoundPlayer[]
  start_time DateTime      @default(now())
  end_time   DateTime? // Time when round ended
  events     RoundEvent[] // All events in the round, e.g., bet, action, deal, etc.
  outcome    String // Round outcome, e.g., who won, final score
  payload    Json

  @@index([start_time])
  @@index([end_time])
}

model RoundPlayer {
  round     Round    @relation(fields: [round_id], references: [id])
  round_id  String
  user      User     @relation(fields: [user_id], references: [id])
  user_id   String
  seat      Int
  hand      Json
  bet       BigInt?
  return    BigInt?
  is_winner Boolean  @default(false)

  @@id([round_id, user_id])
}

model RoundEvent {
  id        String   @id @default(uuid())
  round     Round    @relation(fields: [roundId], references: [id])
  roundId   String
  type      String
  payload   Json
  initiator String?
  target    String?
  outcome   Boolean // This will tell analytics if this is outcome to analyse for leaderboards (such as hand winning)
  timestamp DateTime @default(now())

  @@index([roundId])
  @@index([type])
  @@index([timestamp])
  @@index([outcome])
}

model Punishment {
  id         Int            @id @unique @default(autoincrement())
  type       PunishmentType
  punishment String
  account    User?          @relation(fields: [account_id], references: [id])
  account_id String?
  discord_id String?
  reason     String
  moderator  String
  expires    DateTime?
  current    Boolean        @default(true)
  applied    DateTime       @default(now())
}

enum PunishmentType {
  DISCORD
  GAME
}

model Wallet {
  user_id     String        @id
  balance     BigInt        @default(10000) // in 1/100ths of a chip
  transaction Transaction[]
}

model Transaction {
  id           String            @id @default(uuid())
  wallet       Wallet            @relation(fields: [user_id], references: [user_id])
  user_id      String
  amount       BigInt // in 1/100ths of a chip
  type         String // 'credit', 'debit', 'refund', 'gift'.
  reason       String
  created_at   DateTime          @default(now())
  reference_id String            @unique // optional, for idempotency
  status       TransactionStatus // 'completed' -- could be 'pending', 'failed', etc.

  @@index([user_id])
  @@index([created_at])
  @@index([reference_id])
}

enum TransactionStatus {
  FAILED
  COMPLETE
  PENDING
  OTHER
}
